//g++  5.4.0
 
#include<bits/stdc++.h>
using namespace std;
 
#define ff first
#define ss second
#define int long long
#define pb push_back
#define pii pair< int,int >
#define fast ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0) ;
#define L(p) 2*p+1
#define R(p) 2*p+2
 
const int nax = 2e5+10;
struct node
{
    int prefix_mx , suffix_mx , total_mx , total_sum;
    node()
    {
        prefix_mx = suffix_mx = total_mx = total_sum = 0;
    }
};
node jt[4*nax];
 
node fun(node &a,node &b)
{
    node c;
    c.total_sum = a.total_sum + b.total_sum;
    c.prefix_mx = max( a.prefix_mx , a.total_sum + b.prefix_mx );
    c.suffix_mx = max( b.suffix_mx , b.total_sum + a.suffix_mx );
    c.total_mx  = max( a.total_mx , max( b.total_mx , a.suffix_mx + b.prefix_mx ) );
    return c;
     // whatever u wish
}
void build(int l , int h , int p )
{
	if(l == h)
	{
		cin >> jt[p].total_sum;
        jt[p].prefix_mx = jt[p].suffix_mx = jt[p].total_mx = max(0LL, jt[p].total_sum );
		return;
	}
	int m = (l+h)>>1;
	build(l , m , L(p));
	build(m+1 , h , R(p));
	jt[p] = fun(jt[L(p)],jt[R(p)]);
	return;
}
 
void update(int l ,int h , int p, int ql, int qh,int v)
{
	if(l > qh || h < ql)
		return;
	else if(l >= ql && h <= qh)
	{
		jt[p].total_sum = v;
        jt[p].prefix_mx = jt[p].suffix_mx = jt[p].total_mx = max(0LL, jt[p].total_sum );
		return;
	}
	int m = (l + h )>> 1;
	update( l , m , L(p) ,ql ,qh,v);
	update(m+1 , h , R(p) , ql ,qh,v);
	jt[p] = fun(jt[L(p)],jt[R(p)]);
	return;
}
 
signed main()
{
    fast;
    int n , q;
    cin >> n >> q;
    build( 1,n,0 );
    while( q-- )
    {
        int a,b;
        cin >> a >> b;
        update( 1,n,0,a,a,b);
        cout << jt[0].total_mx << "\n";
    }
}
